
'use server';

/**
 * @fileOverview A routing agent that determines the user's intent from a voice query
 * and calls the appropriate specialized agent.
 */

import { ai } from '@/ai/genkit';
import { z } from 'zod';
import { findSchemes } from './government-schemes-flow';
import { marketAnalysis } from './market-analysis-flow';
import { recommendCrops } from './crop-recommender-flow';
import { languages } from '@/lib/i18n';

const RouterInputSchema = z.object({
  query: z.string().describe("The user's transcribed voice query."),
  language: z.string().optional().describe('The language for the response.'),
});

const RouterOutputSchema = z.object({
  agentResponse: z.string().describe('The final textual response generated by the selected agent, which will be converted to speech.'),
  actionTaken: z.string().describe("A brief description of which agent was called or what action was taken. e.g., 'Called Market Analysis Agent' or 'Could not determine intent'."),
  agentUsed: z.enum(['marketAnalysis', 'cropRecommender', 'cropDiagnosis', 'irrigationScheduler', 'governmentSchemes', 'fallback']).optional(),
  sourceLink: z.string().url().optional().describe("A link to the agent's page for more details.")
});

// Define tools that the router can call
const marketAnalysisTool = ai.defineTool(
  {
    name: 'marketAnalysis',
    description: 'Use for questions about crop prices, market trends, and commodity markets. Keywords: price, rate, market, mandi, cost, sell.',
    inputSchema: z.object({
      commodity: z.string().optional(),
      location: z.string().optional(),
      query: z.string(),
    }),
    outputSchema: z.any(),
  },
  async (input) => marketAnalysis({
    query: input.query,
    commodity: input.commodity,
    location: input.location
  })
);

const cropRecommenderTool = ai.defineTool(
  {
    name: 'cropRecommender',
    description: 'Use for questions about which crops to plant, what to grow, or crop selection. Keywords: grow, plant, sow, cultivate, which crop.',
    inputSchema: z.object({
      location: z.string(),
      userGoal: z.string().optional(),
    }),
    outputSchema: z.any(),
  },
  async (input) => recommendCrops({
      location: input.location,
      userGoal: input.userGoal || "Based on the user query"
  })
);

const governmentSchemesTool = ai.defineTool(
  {
    name: 'governmentSchemes',
    description: 'Use for questions about government support, subsidies, or agricultural schemes. Keywords: scheme, government, subsidy, loan, help, PM Kisan, bima, insurance.',
    inputSchema: z.object({
      query: z.string(),
    }),
    outputSchema: z.any(),
  },
  async (input) => findSchemes({ query: input.query })
);

export async function routeVoiceQuery(input: z.infer<typeof RouterInputSchema>): Promise<z.infer<typeof RouterOutputSchema>> {
  return voiceAgentRouterFlow(input);
}

const voiceAgentRouterFlow = ai.defineFlow(
  {
    name: 'voiceAgentRouterFlow',
    inputSchema: RouterInputSchema,
    outputSchema: RouterOutputSchema,
  },
  async (input) => {
    const currentLanguageName = languages.find(l => l.code === input.language)?.name.split(' ')[0] || 'English';

    // Step 1: Use the AI to determine which tool to call based on the user's query.
    const { toolRequest } = await ai.generate({
      model: 'googleai/gemini-2.0-flash',
      prompt: `You are an expert AI routing agent for NeerVaani. Your job is to understand a farmer's spoken query and decide which specialized tool is the most appropriate to use to answer their question. The user's query is: "${input.query}".`,
      tools: [marketAnalysisTool, cropRecommenderTool, governmentSchemesTool],
      config: { temperature: 0 },
    });

    if (toolRequest) {
        console.log(`Calling tool: ${toolRequest.name}`);
        try {
            // Step 2: Execute the chosen tool.
            const toolResponse = await toolRequest.run();

            // Step 3: Use the AI again to generate a natural language response from the tool's structured output.
            const { output: finalResponse } = await ai.generate({
                model: 'googleai/gemini-2.0-flash',
                prompt: `You are NeerVaani, a helpful AI assistant for farmers. A user asked: "${input.query}". You have used a tool called '${toolRequest.name}' and received the following JSON data.
                
                JSON Data:
                \`\`\`json
                ${JSON.stringify(toolResponse, null, 2)}
                \`\`\`

                Your task is to synthesize this data into a simple, clear, and detailed response for the farmer. Address them directly. Explain your findings in a conversational way. If you found schemes, mention the most relevant one. If you have recommendations, state them clearly. Do not just repeat the JSON. The response should be in: ${currentLanguageName}.`,
                output: {
                    schema: z.object({
                        summary: z.string().describe("A detailed, conversational summary of the data."),
                        recommendation: z.string().optional().describe("A key recommendation if applicable."),
                    })
                }
            });
            
            if (!finalResponse) {
                throw new Error("The AI failed to generate a summary for the tool's output.");
            }

            const agentResponse = `${finalResponse.summary} ${finalResponse.recommendation || ''} To get more detailed information, kindly use the full ${toolRequest.name} agent in the NeerHub.`;
            const agentUsed = toolRequest.name as z.infer<typeof RouterOutputSchema>['agentUsed'];

            return {
                agentResponse,
                actionTaken: `Called ${toolRequest.name} tool.`,
                agentUsed: agentUsed,
                sourceLink: `/neerhub#${agentUsed}`
            };
        } catch (error: any) {
            console.error(`Error executing tool ${toolRequest.name}:`, error);
            // Formulate a user-friendly error message, especially for location errors.
            let userFriendlyError = "I'm sorry, an error occurred while trying to get that information. Please try again.";
            if (error.message && error.message.includes('Could not retrieve environmental data')) {
                userFriendlyError = "I couldn't get information for that location. Currently, I only have detailed data for Pune and Bangalore. Please try one of those locations or use the full agent for manual input."
            }

            return {
                agentResponse: userFriendlyError,
                actionTaken: `Error in ${toolRequest.name} tool.`,
                agentUsed: 'fallback'
            };
        }
    }
    
    // Fallback if no specific tool is called
    const { output: fallbackResponse } = await ai.generate({
          prompt: `You are a friendly and helpful farmer's assistant called NeerVaani. The user said: "${input.query}". Respond conversationally and helpfully in ${currentLanguageName}. If you don't know the answer, politely say so. If the query seems to be about a feature you don't support via voice (like crop diagnosis from an image), guide them to the correct tool in the NeerHub.`,
          model: 'googleai/gemini-2.0-flash',
    });
    const agentResponse = fallbackResponse ?? "Hello! How can I help you with your farm today?";

    return {
      agentResponse,
      actionTaken: 'Conversational fallback.',
      agentUsed: 'fallback'
    };
  }
);
